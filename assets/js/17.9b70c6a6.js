(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{292:function(v,_,e){"use strict";e.r(_);var c=e(10),o=Object(c.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("作为一名研发，到了一定程度之后对性能的优化是不可避免的，现总结一下在日常研发中，思考以及有过实践的一些性能优化点。")]),v._v(" "),_("h2",{attrs:{id:"减少请求数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#减少请求数"}},[v._v("#")]),v._v(" 减少请求数")]),v._v(" "),_("ul",[_("li",[v._v("减少 "),_("code",[v._v("DNS")]),v._v(" 查询时间。")]),v._v(" "),_("li",[v._v("利用浏览器本地存储或者 "),_("code",[v._v("redux、dva")]),v._v(" 将请求数据缓存在本次会话中，避免多次请求。")]),v._v(" "),_("li",[v._v("利用 "),_("code",[v._v("url-loader")]),v._v(" 对小图片进行 "),_("code",[v._v("base64")]),v._v(" 转码通过增加体积换请求 或者 利用 "),_("code",[v._v("webpack5 - assets modules")]),v._v("。")]),v._v(" "),_("li",[v._v("配合 "),_("code",[v._v("webpack chunkhash")]),v._v(" 合理使用浏览器缓存。")])]),v._v(" "),_("h2",{attrs:{id:"较小请求资源体积"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#较小请求资源体积"}},[v._v("#")]),v._v(" 较小请求资源体积")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("webpack")]),v._v(" 自带 "),_("code",[v._v("new TerserPlugin")]),v._v(" 插件开启多线程 "),_("code",[v._v("js")]),v._v(" 压缩。")]),v._v(" "),_("li",[v._v("生产环境看情况要不要进行 "),_("code",[v._v("mini-css-extract-plugin")]),v._v(" 抽离 "),_("code",[v._v("css")]),v._v(" 样式，利用 "),_("code",[v._v("optimize-css-assets-webpack-plugin")]),v._v(" 压缩 "),_("code",[v._v("css")]),v._v("。")]),v._v(" "),_("li",[_("code",[v._v("externals")]),v._v(" 拆分不常变更的三方库，利用 "),_("code",[v._v("cdn")]),v._v(" 加载。")]),v._v(" "),_("li",[v._v("开启 "),_("code",[v._v("tree sharking")]),v._v(" 减少无用代码的引入。")]),v._v(" "),_("li",[_("code",[v._v("IgnorePlugin")]),v._v(" 忽略不需要的文件。")]),v._v(" "),_("li",[v._v("利用 "),_("code",[v._v("iconfont")]),v._v(" 替换图标、图片。")])]),v._v(" "),_("h2",{attrs:{id:"提升网络传输速率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提升网络传输速率"}},[v._v("#")]),v._v(" 提升网络传输速率")]),v._v(" "),_("ul",[_("li",[v._v("合理使用 "),_("code",[v._v("图片大小")]),v._v(" 以及进行图片 "),_("code",[v._v("压缩")]),v._v("。")]),v._v(" "),_("li",[_("code",[v._v("gzip")]),v._v(" 压缩。")]),v._v(" "),_("li",[_("code",[v._v("nginx")]),v._v(" 代理以及负载均衡。")]),v._v(" "),_("li",[_("code",[v._v("http2")]),v._v(" 头部压缩（减少每次请求附带开销）、多路复用（保持一个链接可以用，减少握手次数带来性能损耗）、服务端推送（主动提前推送浏览器需要请求的资源）、请求优先级（重要的数据先请求或者先推送）。")])]),v._v(" "),_("h2",{attrs:{id:"构建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构建"}},[v._v("#")]),v._v(" 构建")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("babel")]),v._v(" 开启缓存，"),_("code",[v._v("babel-loader?cacheDirectory")]),v._v("。")]),v._v(" "),_("li",[_("code",[v._v("loader")]),v._v(" 指定 "),_("code",[v._v("include")]),v._v(" 或者 "),_("code",[v._v("exclude")]),v._v("指定目录，缩小构建范围。")]),v._v(" "),_("li",[_("code",[v._v("loader")]),v._v(" 的耗时如果比较多的话，可以使用 "),_("code",[v._v("thread-loader")]),v._v(" 开启多线程池，充分利用机器资源。")]),v._v(" "),_("li",[_("code",[v._v("HardSourceWebpackPlugin")]),v._v(" 为模块提供中间缓存，首次构建时间没有太大变化，但是第二次开始，构建时间极大减少。")]),v._v(" "),_("li",[_("code",[v._v("pm2")]),v._v(" 可以开启 "),_("code",[v._v("node cluster")]),v._v(" 集群模式。")]),v._v(" "),_("li",[_("code",[v._v("js")]),v._v(" 设置 "),_("code",[v._v("chunkhash，css")]),v._v(" 利用 "),_("code",[v._v("new extractTextPlugin('../css/bundle.[name].[contenthash].css')")]),v._v(" 设置 "),_("code",[v._v("contenthash")]),v._v("（暂未尝试），目的："),_("code",[v._v("js")]),v._v(" 模块改变之后，因为引用了 "),_("code",[v._v("css")]),v._v("，如果依然使用 "),_("code",[v._v("chunkhash")]),v._v(" 会导致 "),_("code",[v._v("css")]),v._v(" 重复构建，所以利用插件设置只有 "),_("code",[v._v("css")]),v._v(" 内容发生变化的才构建，提升效率。")])])])}),[],!1,null,null,null);_.default=o.exports}}]);