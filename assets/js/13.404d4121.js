(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{288:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("前端很多场景其实都会涉及到正则表达式的使用，奈何之前个人正则的知识都是零散的，读完正则表达式迷你书之后受益良多，一来总结一下知识点，二来回顾的时候可以更方便。")]),t._v(" "),s("p",[t._v("根据目录精简整理")]),t._v(" "),s("h2",{attrs:{id:"匹配攻略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配攻略"}},[t._v("#")]),t._v(" 匹配攻略")]),t._v(" "),s("h3",{attrs:{id:"字符组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符组"}},[t._v("#")]),t._v(" 字符组")]),t._v(" "),s("p",[t._v("匹配只是其中的一个字符，范围表示利用 "),s("code",[t._v("-")]),t._v(" 省略和简写。")]),t._v(" "),s("h4",{attrs:{id:"排除字符组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排除字符组"}},[t._v("#")]),t._v(" 排除字符组")]),t._v(" "),s("p",[t._v("利用 "),s("code",[t._v("^")]),t._v("，字符组"),s("code",[t._v("第一个放置 ^ 表示求反")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"常见的简写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的简写"}},[t._v("#")]),t._v(" 常见的简写")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符组")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("\\d")])]),t._v(" "),s("td",[t._v("数字 "),s("code",[t._v("[0-9]")]),t._v("，表示一位数字。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\D")])]),t._v(" "),s("td",[t._v("表示 "),s("code",[t._v("[^0-9]")]),t._v("，表示除了数字之外的任意字符。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\w")])]),t._v(" "),s("td",[t._v("表示 "),s("code",[t._v("[0-9a-zA-Z]")]),t._v("。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\W")])]),t._v(" "),s("td",[s("code",[t._v("[^0-9a-zA-Z]")]),t._v("，非单词字符。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\s")])]),t._v(" "),s("td",[s("code",[t._v("[\\t\\v\\n\\r\\f]")]),t._v("，表示空白字符，包括空格、水平、垂直制表符、换行、回车、换页符。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\S")])]),t._v(" "),s("td",[s("code",[t._v("[^\\t\\v\\n\\r\\f]")]),t._v("，非空白符。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v(".")])]),t._v(" "),s("td",[s("code",[t._v("[^\\n\\r\\u2028\\u2029]")]),t._v("，通配符。表示几乎任意字符。")])])])]),t._v(" "),s("p",[t._v("匹配"),s("code",[t._v("任意字符")]),t._v("，"),s("code",[t._v("[\\d\\D]、[\\w\\W]、[\\s\\S]、[^]")])]),t._v(" "),s("h3",{attrs:{id:"量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),s("h4",{attrs:{id:"简写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简写"}},[t._v("#")]),t._v(" 简写")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("量词")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("{m,}")])]),t._v(" "),s("td",[t._v("至少出现 "),s("code",[t._v("m")]),t._v(" 次。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("{m}")])]),t._v(" "),s("td",[t._v("出现 "),s("code",[t._v("m")]),t._v(" 次。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("?")])]),t._v(" "),s("td",[t._v("等价于 "),s("code",[t._v("{0,1}")]),t._v("，出现或者不出现。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("+")])]),t._v(" "),s("td",[t._v("等价 "),s("code",[t._v("{1,}")]),t._v("，出现"),s("code",[t._v("至少一次")]),t._v("。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("*")])]),t._v(" "),s("td",[t._v("等价 "),s("code",[t._v("{0,}")]),t._v("，出现"),s("code",[t._v("任意次")]),t._v("，有可能不出现。")])])])]),t._v(" "),s("h4",{attrs:{id:"贪婪与惰性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪与惰性"}},[t._v("#")]),t._v(" 贪婪与惰性")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("贪婪")]),t._v("会尽可能"),s("code",[t._v("多的匹配")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("惰性")]),t._v("会尽可能"),s("code",[t._v("少的匹配")]),t._v("。\n具体惰性实现：量词后边"),s("code",[t._v("加问号")]),t._v("就能实现惰性匹配。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("惰性量词")]),t._v(" "),s("th",[t._v("贪婪量词")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("{m,n}?")])]),t._v(" "),s("td",[s("code",[t._v("{m,n}")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("{m,}?")])]),t._v(" "),s("td",[s("code",[t._v("{m,}")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("??")])]),t._v(" "),s("td",[s("code",[t._v("?")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("+?")])]),t._v(" "),s("td",[s("code",[t._v("+")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("*?")])]),t._v(" "),s("td",[s("code",[t._v("*")])])])])])])]),t._v(" "),s("h4",{attrs:{id:"多选分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多选分支"}},[t._v("#")]),t._v(" 多选分支")]),t._v(" "),s("p",[t._v("管道符号代表分割 "),s("code",[t._v("|")]),t._v("，默认惰性匹配，前边的匹配成功后面不会尝试匹配。例如匹配 "),s("code",[t._v("good")]),t._v(" 和 "),s("code",[t._v("nice")]),t._v("，使用 "),s("code",[t._v("/good|nice/g")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("good|nice")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"good idea, nice day!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['good', 'nice']")]),t._v("\n")])])]),s("h2",{attrs:{id:"匹配位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配位置"}},[t._v("#")]),t._v(" 匹配"),s("code",[t._v("位置")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("^")]),t._v("，匹配"),s("code",[t._v("开头")]),t._v("，在多行匹配中匹配行开头。")]),t._v(" "),s("li",[s("code",[t._v("$")]),t._v("，匹配"),s("code",[t._v("结尾")]),t._v("，在多行匹配中匹配行结尾。")]),t._v(" "),s("li",[s("code",[t._v("\\b")]),t._v("，"),s("code",[t._v("单词边界")]),t._v("，具体是 "),s("code",[t._v("\\w")]),t._v(" 和 "),s("code",[t._v("\\W")]),t._v(" 之间的位置，也包括 "),s("code",[t._v("\\w")]),t._v(" 和"),s("code",[t._v("^")]),t._v(" 之间的位置和 "),s("code",[t._v("\\w")]),t._v(" 和 "),s("code",[t._v("$")]),t._v(" 之间的位置，看个例子：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[JS] Lesson_01.mp4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '[#JS#] #Lesson_01#.#mp4#'")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("\\B")]),t._v("，这个比较好理解，就是 "),s("code",[t._v("\\b 的取反")]),t._v("，知道了 "),s("code",[t._v("\\b")]),t._v(" ，所以")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[JS] Lesson_01.mp4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\B")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"')]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("(?=p)")]),t._v("，其中 "),s("code",[t._v("p")]),t._v(" 是一个子模式，即 "),s("code",[t._v("p 前面的位置")]),t._v("，是位置，也就是在 "),s("code",[t._v("p")]),t._v(" 前面做手脚，不是前面的字符，其中 "),s("code",[t._v("p")]),t._v(" 可以是想匹配的任意字符。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?=l)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "he#l#lo"')]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("(?!p)")]),t._v("，是 "),s("code",[t._v("(?=p)")]),t._v(" 的反模式。记一个特殊的，不是开头，"),s("code",[t._v("/(?!^)/")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?!l)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "#h#ell#o#"')]),t._v("\n")])])]),s("ul",[s("li",[t._v("必须包含"),s("code",[t._v("数字")]),t._v("，"),s("code",[t._v("/(?=.*[0-9])/")]),t._v("。")]),t._v(" "),s("li",[t._v("必须包含"),s("code",[t._v("数字和小写字母")]),t._v("，"),s("code",[t._v("/(?=.*[0-9])(?=.*[a-z])/")]),t._v("，这样是不会挑位置的，数字和字母的顺序随意都可以匹配。")]),t._v(" "),s("li",[t._v("必须包含"),s("code",[t._v("小写字母和大写字母")]),t._v("，"),s("code",[t._v("/(?=.*[a-z])(?=.*[A-Z])/")]),t._v("，同理。")]),t._v(" "),s("li",[t._v("必须包含"),s("code",[t._v("数字、大、小写字母")]),t._v("，"),s("code",[t._v("/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])/")]),t._v("，同理。")])]),t._v(" "),s("h2",{attrs:{id:"括号的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#括号的作用"}},[t._v("#")]),t._v(" 括号的作用")]),t._v(" "),s("p",[t._v("括号的主要作用就是提供了"),s("code",[t._v("分组")]),t._v("，便于引用。引用分组会有在 "),s("code",[t._v("js")]),t._v(" 里引用，在正则表达式里引用。括号里的正则强调其是一个整体。")]),t._v(" "),s("h3",{attrs:{id:"分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("分组：如果要匹配连续出现的单个字符用 "),s("code",[t._v("/x+/")]),t._v(" 即可，但是如果需要匹配连续出现的 "),s("code",[t._v("'abc'")]),t._v("，则需要 "),s("code",[t._v("/(abc)+/")]),t._v("，将量词 "),s("code",[t._v("+")]),t._v(" 作用于括号这个整体的表达式上。")])]),t._v(" "),s("li",[s("p",[t._v("分组引用：有了括号，可以对数据进行提取以及更强大的替换操作，因为分组可以捕获数据，利用构造函数的全局属性 "),s("code",[t._v("$1~$9")]),t._v(" 提取。")])]),t._v(" "),s("li",[s("p",[t._v("如果想要忽略多个分组中的某一个，可以使用?:，假设 (\\w+.(com|cn))，不需要第二个 com|cn 的分组的话，可以修改为(\\w.(?:com|cn))")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如替换日期顺序")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regExp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{4})-(\\d{2})-(\\d{2})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timeString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-05-15"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntimeString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$2/$3/$1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "05/15/2020"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换h标题为p")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<h1>hello~</h1>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<(h[1-6])>([\\s\\S]+)<\\/\\1>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<p>$2</p>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里第一个分组是(h[1-6])，也就是说对称的匹配和用分组和\\1来搞定，对于闭合html标签来说的话。")]),t._v("\n")])])]),s("h3",{attrs:{id:"反向引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" 反向引用")]),t._v(" "),s("p",[t._v("假如要求匹配的"),s("code",[t._v("前后一致")]),t._v("，引用之前的第 "),s("code",[t._v("n")]),t._v(" 个分组，看个例子")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配日期，只是匹配三种模式，并且年份和月份之间的连接符必须一致")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regExp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-05-15"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020/05-15"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("p",[t._v("其中 "),s("code",[t._v("\\1")]),t._v(" 代表的就是引用前边的那个分组 "),s("code",[t._v("(-|\\/|\\.)")]),t._v("，"),s("code",[t._v("\\2 \\3")]),t._v(" 也就是分别指代第二和第三个分组。反向引用就是引用前边的分组，当引用到了不存在的分组时，只是匹配反向引用的字符本身。")]),t._v(" "),s("h3",{attrs:{id:"非捕获括号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非捕获括号"}},[t._v("#")]),t._v(" 非捕获括号")]),t._v(" "),s("p",[t._v("如果不使用引用，则可以利用非捕获括号 "),s("code",[t._v("(?:p)")]),t._v(" 和 "),s("code",[t._v("(?:p1|p2|p3)")]),t._v("，如果不用反向引用，对于匹配 "),s("code",[t._v("'abc'")]),t._v(" 的连字符，可以修改为 "),s("code",[t._v("/(?:abc)+/g")])]),t._v(" "),s("p",[t._v("一些例子")]),t._v(" "),s("ul",[s("li",[t._v("将每个单词首字母转为大写")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("titleize")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?:^|\\s)\\w")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("titleize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ni hao a "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Ni Hao A "')]),t._v("\n")])])]),s("ul",[s("li",[t._v("_-空格 转驼峰")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("camelize")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[-_\\s]+(.)?")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("camelize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_get_name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "GetName"')]),t._v("\n")])])]),s("ul",[s("li",[t._v("驼峰转中划线")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先将大写字母匹配到的字符前边加上-，利用了分组的特性。再将任意多个 _-空格 转为-")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("dasherize")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  str\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([A-Z])")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-$1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[_-\\s]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dasherize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GetName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "-get-name"')]),t._v("\n")])])]),s("ul",[s("li",[t._v("匹配成对标签，"),s("code",[t._v("/<([^>]+)>[\\d\\D]*<\\/\\1>/")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Reg Exp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("bye bye"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("这里匹配一个开标签，使用 "),s("code",[t._v("<[^>]+>")]),t._v(" ，也就是 "),s("code",[t._v("<>")]),t._v(" 中非 "),s("code",[t._v(">")]),t._v(" 的任意字符。\n匹配闭标签，"),s("code",[t._v("<\\/[^>]+>")]),t._v("，闭标签中只比开标签多了一个 "),s("code",[t._v("/")]),t._v(" 所以需要利用 "),s("code",[t._v("\\")]),t._v(" 转义，这其中又因为需要匹配成对的标签，所以可以用前边的知识，反向引用，需要反向引用所以肯定需要分组了，最后我们能够写出来，"),s("code",[t._v("/<([^>]+)>[\\d\\D]*<\\/\\1>/")]),t._v("，"),s("code",[t._v("[\\d\\D]")]),t._v(" 匹配任意字符。")]),t._v(" "),s("h2",{attrs:{id:"优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[t._v("#")]),t._v(" 优先级")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作符描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("操作符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("优先级")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("转义符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("括号、方括号")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("(...)、(?:...)、(?=...)、(?!...)、[...]")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("量词")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("{m}、{m, n}、{m, }、?、+、*")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("位置、序号")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("^、$、\\元字符、一般字符")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("管道符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("\\|")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("5")])])])]),t._v(" "),s("h3",{attrs:{id:"需要转义的字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需要转义的字符"}},[t._v("#")]),t._v(" 需要转义的字符")]),t._v(" "),s("p",[t._v("需要转义的字符是正则中有特殊含义的字符，"),s("code",[t._v("^、$、.、*、+、?、!、|、\\、/、(、)、[、]、{、}、=、!、:、-")])]),t._v(" "),s("h2",{attrs:{id:"优化效率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化效率"}},[t._v("#")]),t._v(" 优化效率")]),t._v(" "),s("ul",[s("li",[t._v("使用具体字符组来替代通配符消除回溯。")]),t._v(" "),s("li",[t._v("不需要分组和反向引用时，使用非捕获分组。")]),t._v(" "),s("li",[t._v("独立出确定字符，"),s("code",[t._v("/a+/ => /aa*/")]),t._v("。")]),t._v(" "),s("li",[t._v("提取分支的公共部分，"),s("code",[t._v("/this|that/ => /th(?:is|at)/")]),t._v("。")]),t._v(" "),s("li",[t._v("减少分支数量，缩小范围，"),s("code",[t._v("/red|read/ => /rea?d/")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[t._v("JavaScript 正则表达式迷你书（老姚）")])])}),[],!1,null,null,null);s.default=n.exports}}]);