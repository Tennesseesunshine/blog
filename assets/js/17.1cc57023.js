(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{292:function(_,v,t){"use strict";t.r(v);var e=t(10),a=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("在工作中结合 vscode 会非常便利。")]),_._v(" "),v("h2",{attrs:{id:"生成-sshkey"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成-sshkey"}},[_._v("#")]),_._v(" 生成 sshkey")]),_._v(" "),v("ul",[v("li",[v("code",[_._v('ssh-keygen -t rsa -C "邮箱"')])]),_._v(" "),v("li",[v("code",[_._v("cd ~/.ssh")]),_._v(" 复制 "),v("code",[_._v("id_rsa.pub")]),_._v(" 内容复制到 "),v("code",[_._v("git")]),_._v(" 库中")])]),_._v(" "),v("h2",{attrs:{id:"配置信息以及查看"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置信息以及查看"}},[_._v("#")]),_._v(" 配置信息以及查看")]),_._v(" "),v("h3",{attrs:{id:"查看配置信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看配置信息"}},[_._v("#")]),_._v(" 查看配置信息")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git config --list")])])]),_._v(" "),v("h3",{attrs:{id:"全局配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局配置"}},[_._v("#")]),_._v(" 全局配置")]),_._v(" "),v("ul",[v("li",[v("code",[_._v('git config --global user.name "yourname"')])]),_._v(" "),v("li",[v("code",[_._v('git config --global user.email "your_email"')])])]),_._v(" "),v("h3",{attrs:{id:"在不同-git-文件下-config-中设置不同的局部变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在不同-git-文件下-config-中设置不同的局部变量"}},[_._v("#")]),_._v(" 在不同 "),v("code",[_._v(".git")]),_._v(" 文件下 "),v("code",[_._v("config")]),_._v(" 中设置不同的局部变量")]),_._v(" "),v("ul",[v("li",[v("code",[_._v('git config user.name "name"')])]),_._v(" "),v("li",[v("code",[_._v('git config user.email "email"')])])]),_._v(" "),v("h2",{attrs:{id:"常用的基本操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用的基本操作"}},[_._v("#")]),_._v(" 常用的基本操作")]),_._v(" "),v("h3",{attrs:{id:"初始化创建-git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#初始化创建-git"}},[_._v("#")]),_._v(" 初始化创建 "),v("code",[_._v(".git")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git init -y")]),_._v(" 加参数可以跳过填写信息")])]),_._v(" "),v("h3",{attrs:{id:"添加本地已有文件到-git-远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#添加本地已有文件到-git-远程仓库"}},[_._v("#")]),_._v(" 添加本地已有文件到 "),v("code",[_._v("git")]),_._v(" 远程仓库")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git remote add origin xxxx.git")])])]),_._v(" "),v("h3",{attrs:{id:"查看分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[_._v("#")]),_._v(" 查看分支")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git branch")]),_._v(" 当前本地分支")]),_._v(" "),v("li",[v("code",[_._v("git branch -a")]),_._v(" 查看所有分支【本地+远程】")])]),_._v(" "),v("h3",{attrs:{id:"更新远程分支到本地分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#更新远程分支到本地分支"}},[_._v("#")]),_._v(" 更新远程分支到本地分支")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git checkout -b <localBranch> origin/<remoteBranch>")]),_._v(" 更新远程分支 "),v("code",[_._v("remoteBranch")]),_._v(" 在本地的 "),v("code",[_._v("localBranch")]),_._v(" 分支上")])]),_._v(" "),v("h3",{attrs:{id:"临时存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#临时存储"}},[_._v("#")]),_._v(" 临时存储")]),_._v(" "),v("p",[_._v("开发了一半还没完成突然线上出现了紧急问题，这个时候工作区未清空的状态下 "),v("code",[_._v("git")]),_._v(" 不允许签出和签入，此时不想 "),v("code",[_._v("commit")]),_._v(" 的话，就要用到以下命令")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git stash")]),_._v(" 将目前的改动存储起来")]),_._v(" "),v("li",[v("code",[_._v("git stash list")]),_._v(" 查看 "),v("code",[_._v("stash")]),_._v(" 了哪些")]),_._v(" "),v("li",[v("code",[_._v("git stash apply")]),_._v(" 如果要使用其他个，"),v("code",[_._v("git stash apply stash@{$num}")]),_._v(" "),v("code",[_._v("num")]),_._v(" 从 "),v("code",[_._v("0")]),_._v(" 开始 结合 "),v("code",[_._v("vocode")]),_._v(" 可以点击对应的就可以应用")]),_._v(" "),v("li",[v("code",[_._v("git stash clear")]),_._v(" 清除掉 "),v("code",[_._v("stash")])])]),_._v(" "),v("h3",{attrs:{id:"切换分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[_._v("#")]),_._v(" 切换分支")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git checkout <branch>")])])]),_._v(" "),v("h3",{attrs:{id:"若想基于当前分支拉出来一个新的分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#若想基于当前分支拉出来一个新的分支"}},[_._v("#")]),_._v(" 若想基于当前分支拉出来一个新的分支")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git checkout -b <newBranch>")])]),_._v(" "),v("li",[_._v("推送到远程仓库 "),v("code",[_._v("git push origin <newBranch>")])])]),_._v(" "),v("h3",{attrs:{id:"删除本地和远程分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除本地和远程分支"}},[_._v("#")]),_._v(" 删除本地和远程分支")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git branch -d <branch>")]),_._v(" 有时候不生效可能需要换成 "),v("code",[_._v("-D")])]),_._v(" "),v("li",[v("code",[_._v("git push origin --delete <branch>")])])]),_._v(" "),v("h3",{attrs:{id:"查看状态、将文件添加到缓冲区、提交到本地仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看状态、将文件添加到缓冲区、提交到本地仓库"}},[_._v("#")]),_._v(" 查看状态、将文件添加到缓冲区、提交到本地仓库")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git status")])]),_._v(" "),v("li",[v("code",[_._v("git log")])]),_._v(" "),v("li",[v("code",[_._v("git reflog")]),_._v(" 相比 "),v("code",[_._v("git log")]),_._v(" 它每一步操作都能看到（ "),v("code",[_._v(".git")]),_._v(" 下的 "),v("code",[_._v("refs")]),_._v(" 目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针，所以猜测 "),v("code",[_._v("git reflog")]),_._v(" 基本上跟 "),v("code",[_._v("refs")]),_._v(" 有关）")]),_._v(" "),v("li",[v("code",[_._v("git add . | git add fileName")])]),_._v(" "),v("li",[v("code",[_._v('git commit -m "msg"')]),_._v(" "),v("code",[_._v("-m")]),_._v(" 参数表示可以直接输入后面的 "),v("code",[_._v("message")])]),_._v(" "),v("li",[v("code",[_._v('git commit -a -m "msg"')]),_._v(" 相当于执行了 "),v("code",[_._v('git add . + git commit -m "msg"')])])]),_._v(" "),v("h3",{attrs:{id:"重置提交信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重置提交信息"}},[_._v("#")]),_._v(" 重置提交信息")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git commit --amend")]),_._v(" "),v("code",[_._v("git push")]),_._v(" 的时候需要校验 "),v("code",[_._v("message")]),_._v(" 格式，如果第一次写错的话就无法 "),v("code",[_._v("push")]),_._v(" 到远程仓库，可以用这个修改提交的 "),v("code",[_._v("message")]),_._v(" 重新 "),v("code",[_._v("push")])])]),_._v(" "),v("h3",{attrs:{id:"pull-不下代码的情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#pull-不下代码的情况"}},[_._v("#")]),_._v(" "),v("code",[_._v("pull")]),_._v(" 不下代码的情况")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git pull origin <branch>")]),_._v(" 偶尔会遇到服务器上的代码一直 "),v("code",[_._v("pull")]),_._v(" 不下来，可以加上 "),v("code",[_._v("origin <branch>")])])]),_._v(" "),v("h3",{attrs:{id:"合并"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合并"}},[_._v("#")]),_._v(" 合并")]),_._v(" "),v("ul",[v("li",[_._v("个人习惯和原则：所有本地改动均已经推送到远程分支的前提")]),_._v(" "),v("li",[v("code",[_._v("git merge <branch>")]),_._v(" 将 "),v("code",[_._v("branch")]),_._v(" 分支合并到当前分支")]),_._v(" "),v("li",[_._v("简单的合并出现冲突，用 "),v("code",[_._v("vscode")]),_._v(" 解决掉冲突，重新"),v("code",[_._v("add 、commit、 push")]),_._v(" 就可以，但是一些有时候出现一些比较复杂的冲突导致合并失败，再次操作的时候会提示当前正在处于合并之中（分支名后带着｜"),v("code",[_._v("MERGING")]),_._v("），需要 "),v("code",[_._v("git merge --abort")]),_._v(" 选项会尝试恢复到你运行合并前的状态\n如果已经合并发现合并错分支（所以合并的东西是不需要保留在工作空间的），可以使用 "),v("code",[_._v("git reset --hard HEAD~")]),_._v(" 来还原到未合并之前，并且工作区是干净的状态")]),_._v(" "),v("li",[_._v("合并中出现 "),v("code",[_._v("Swap file .MERGE_MSG.swp already exists")]),_._v(" 的情况需要打开当前项目 "),v("code",[_._v(".git")]),_._v(" 文件删除 "),v("code",[_._v(".MERGE_MSG.sw*")]),_._v(" 文件，再继续操作")])]),_._v(" "),v("h3",{attrs:{id:"重置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重置"}},[_._v("#")]),_._v(" 重置")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git reset --(soft | mixed | hard ) < HEAD ~(num) > |")])]),_._v(" "),v("li",[_._v("用的比较多的是 "),v("code",[_._v("soft")]),_._v(" 和 "),v("code",[_._v("hard")])]),_._v(" "),v("li",[_._v("跟时间旅行一个道理，"),v("code",[_._v("git reset HEAD")]),_._v(" 跟着 "),v("code",[_._v("HEAD@{1}(HEAD~) HEAD@{2}...")]),_._v(" 或者分支的 "),v("code",[_._v("hash")]),_._v(" 值可以将本地存储库切换到任意的版本")]),_._v(" "),v("li",[_._v("一种场景如果需要回退到某一次版本，并且不要那些版本的改动文件，可以使用 "),v("code",[_._v("git reset --hard HEAD")]),_._v("【硬回退】这个命名回回退到指定的版本并且删掉之前的改动文件，不会出现在暂存区。如果想回退到某次版本，并且需要暂存区看到改动的文件可以使用 "),v("code",[_._v("git reset --soft HEAD")]),_._v("【软回退】")]),_._v(" "),v("li",[_._v("回退到某个之前的版本的话， 需要 "),v("code",[_._v("git push origin <branch> --force")]),_._v(" 推送到远程分支")])]),_._v(" "),v("h3",{attrs:{id:"推送"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#推送"}},[_._v("#")]),_._v(" 推送")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("master")]),_._v(" 分支推送可以直接使用 "),v("code",[_._v("git push")])]),_._v(" "),v("li",[_._v("非 "),v("code",[_._v("master")]),_._v(" 分支需要加上 "),v("code",[_._v("origin <remoteBranch>")]),_._v(" 即："),v("code",[_._v("git push origin remoteBranch")])])]),_._v(" "),v("h3",{attrs:{id:"不是很常用的几个-git-命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不是很常用的几个-git-命令"}},[_._v("#")]),_._v(" 不是很常用的几个 "),v("code",[_._v("git")]),_._v(" 命令")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("git fetch")]),_._v(" 有时候不需要合并的时候会用一下，"),v("code",[_._v("git fetch")]),_._v(" 和 "),v("code",[_._v("git pull")]),_._v(" 的区别就是 "),v("code",[_._v("git pull = git fetch + git merge")])])]),_._v(" "),v("li",[v("p",[v("code",[_._v("submodule")]),_._v(" 的命令")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("git submodule init")])]),_._v(" "),v("li",[v("code",[_._v("git submodule foreach git submodule update")])]),_._v(" "),v("li",[v("code",[_._v("git submodule update --init")])])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);