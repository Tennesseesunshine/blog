(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{289:function(v,_,e){"use strict";e.r(_);var c=e(10),d=Object(c.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("最近在回顾缓存的一些知识点，先列出浏览器读取缓存过程会涉及到到的一些东西。")]),v._v(" "),_("h2",{attrs:{id:"dns-缓存查询过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns-缓存查询过程"}},[v._v("#")]),v._v(" "),_("code",[v._v("DNS")]),v._v(" 缓存查询过程")]),v._v(" "),_("p",[_("code",[v._v("DNS")]),v._v(" 缓存的目的主要是降低域名解析的时间延迟，最终解析成功之后，将所映射的 "),_("code",[v._v("IP")]),v._v(" 返回给浏览器，并且于本地系统进行缓存，过程是递归的。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("浏览器会检查浏览器缓存中有没有这个域名对应的解析过的 "),_("code",[v._v("IP")]),v._v(" 地址。")])]),v._v(" "),_("li",[_("p",[v._v("如果用户浏览器缓存中没有数据，浏览器会查找操作系统缓存 "),_("code",[v._v("hosts")]),v._v(" 文件中是否有这个域名对应的 "),_("code",[v._v("DNS")]),v._v(" 解析的 "),_("code",[v._v("IP")]),v._v(" 结果。")])]),v._v(" "),_("li",[_("p",[v._v("如果 "),_("code",[v._v("hosts")]),v._v(" 也没命中，则向本地 "),_("code",[v._v("DNS")]),v._v(" 服务器尝试发起解析请求。")])]),v._v(" "),_("li",[_("p",[v._v("如果本地 "),_("code",[v._v("DNS")]),v._v(" 服务器没命中，则向根 "),_("code",[v._v("DNS")]),v._v(" 服务器发起解析请求。")])])]),v._v(" "),_("h2",{attrs:{id:"cdn-缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cdn-缓存"}},[v._v("#")]),v._v(" "),_("code",[v._v("CDN")]),v._v(" 缓存")]),v._v(" "),_("p",[v._v("当接入 "),_("code",[v._v("CDN")]),v._v(" 之后，"),_("code",[v._v("CDN")]),v._v(" 节点具有缓存机制。当客户端向 "),_("code",[v._v("CDN")]),v._v(" 节点请求数据时，"),_("code",[v._v("CDN")]),v._v(" 会判断缓存数据是否过期，若没有过期，则直接将缓存数据返回给客户端，否则就向源站点发出请求，从源站点拉取最新数据，更新本地缓存，并将最新数据返回给客户端。")]),v._v(" "),_("h3",{attrs:{id:"不接入-cdn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不接入-cdn"}},[v._v("#")]),v._v(" 不接入 "),_("code",[v._v("CDN")])]),v._v(" "),_("ul",[_("li",[v._v("输入域名之后，浏览器向 "),_("code",[v._v("DNS")]),v._v(" 服务器发起请求，走 "),_("code",[v._v("DNS")]),v._v(" 解析的过程，拿到 "),_("code",[v._v("IP")]),v._v(" 之后直接向对应的 "),_("code",[v._v("IP")]),v._v(" 的服务器发起请求，从源站点拉取最新数据，更新本地缓存，并将最新数据返回给客户端。")])]),v._v(" "),_("h3",{attrs:{id:"接入-cdn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#接入-cdn"}},[v._v("#")]),v._v(" 接入 "),_("code",[v._v("CDN")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("CDN")]),v._v(" 缓存不过期")]),v._v(" "),_("ul",[_("li",[v._v("当浏览器本地缓存的资源过期之后，其不是直接向源站点请求资源，而是向 "),_("code",[v._v("CDN")]),v._v(" 边缘节点请求资源，请求落在 "),_("code",[v._v("CDN")]),v._v(" 这里的时候，因为 "),_("code",[v._v("CDN")]),v._v(" 边缘节点中存在缓存，所以会使用 "),_("code",[v._v("CDN")]),v._v(" 中的缓存。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("CDN")]),v._v(" 缓存过期")]),v._v(" "),_("ul",[_("li",[v._v("若 "),_("code",[v._v("CDN")]),v._v(" 中的缓存也过期，"),_("code",[v._v("CDN")]),v._v(" 节点会向源服务器发出回源请求，从服务器拉取最新数据，更新本地缓存，并将最新数据返回给客户端。")])])])]),v._v(" "),_("h2",{attrs:{id:"浏览器缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[v._v("#")]),v._v(" 浏览器缓存")]),v._v(" "),_("h3",{attrs:{id:"强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),_("p",[v._v("属于本地缓存，因为要么就是硬盘缓存要么就是内存缓存，其中优先级 "),_("code",[v._v("Cache-Control")]),v._v(" 高于 "),_("code",[v._v("Expires")]),v._v("，并且一旦命中则不会向服务端发起任何请求。")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("Expires")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HTTP1.0")]),v._v(" 的产物，是一个绝对时间不准确。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("Cache-Control")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("public")]),v._v(" 认为都可以缓存")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("private")]),v._v(" 认为都可以缓存")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("no-cache")]),v._v(" 客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定，所以使用 "),_("code",[v._v("Etag")]),v._v(" 或者 "),_("code",[v._v("Last-Modified")]),v._v(" 字段来控制缓存")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("no-store")]),v._v(" 不使用缓存")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("max-age")]),v._v(" 所有的缓存会在设置的秒数之后失效")])])])]),v._v(" "),_("li",[_("p",[v._v("命中情况")]),v._v(" "),_("p",[v._v("当做了有效缓存策略之后，网站第一次加载的时候获取的数据是先从服务器 "),_("code",[v._v("200")]),v._v(" 请求，再因为设置缓存策略，关掉页面，再打开，数据再读取的缓存获取是从 "),_("code",[v._v("disk")]),v._v(" 加载到内存中，所以重新打开的第一次是 "),_("code",[v._v("from disk cache")]),v._v("。")]),v._v(" "),_("p",[v._v("当重新第一次打开加载成功之后的缓存是 "),_("code",[v._v("from disk cache")]),v._v(" 并且被加载到了内存里，刷新页面，因为内存读取的优先级高于硬盘，所以刷新之后的缓存读取来源是 "),_("code",[v._v("from memory cache")]),v._v("。")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("from disk cache")])]),v._v(" "),_("ul",[_("li",[v._v("持久、相比内存慢、读取优先级低于内存")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("from memory cache")])]),v._v(" "),_("ul",[_("li",[v._v("非持久、快、读取优先级高于硬盘")])])])])])]),v._v(" "),_("h3",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),_("p",[v._v("当强缓存未命中之后，或者当强缓存的 "),_("code",[v._v("Cache-Control")]),v._v(" 的值设置为 "),_("code",[v._v("no-cache")]),v._v(" 的时候，根据 "),_("code",[v._v("1.1")]),v._v(" 中的 "),_("code",[v._v("ETag")]),v._v(" 优先级高于 "),_("code",[v._v("Last-Modified")]),v._v(" 从而发起协商缓存。")]),v._v(" "),_("p",[v._v("即便如此，发起协商缓存在有没有接入 "),_("code",[v._v("CDN")]),v._v(" 的时候，又可以分为两种情况。")]),v._v(" "),_("p",[v._v("先说 "),_("code",[v._v("HTTP")]),v._v(" 请求和相应头：")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("HTTP1.0")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("Last-Modified")])]),v._v(" "),_("ul",[_("li",[v._v("客户端第一次请求的时候，服务端会在响应头增加 "),_("code",[v._v("Last-Modified")]),v._v(" 的 "),_("code",[v._v("header")]),v._v(" 字段来告知浏览器对应的文件的最后修改时间。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("If-Modified-Since")])]),v._v(" "),_("ul",[_("li",[v._v("下一次请求这个资源，浏览器检测到有 "),_("code",[v._v("Last-Modified")]),v._v(" 这个 "),_("code",[v._v("header")]),v._v("，于是在请求头添加 "),_("code",[v._v("If-Modified-Since")]),v._v(" 这个 "),_("code",[v._v("header")]),v._v("，它的内容就是第一次 "),_("code",[v._v("Last-Modified")]),v._v(" 返回的数据。")]),v._v(" "),_("li",[v._v("当服务器收到之后会用这个值和服务器上保存的最后一次文件的修改时间做对比，如果命中，则返回 "),_("code",[v._v("304")]),v._v("，告知浏览器使用本地缓存，否则返回 "),_("code",[v._v("200")]),v._v("，并且需要更新 "),_("code",[v._v("Last-Modified")]),v._v(" 的值，并且一同返回资源。")])])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HTTP1.1")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("ETag")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Etag")]),v._v(" 是服务器响应请求时，在响应头返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，"),_("code",[v._v("Etag")]),v._v(" 就会重新生成，大体类似文件 "),_("code",[v._v("diff")]),v._v(" 之后生成的一个 "),_("code",[v._v("hash")]),v._v(" 值。")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("If-None-Match")])]),v._v(" "),_("ul",[_("li",[v._v("下一次请求这个资源，浏览器会将上次 "),_("code",[v._v("ETag")]),v._v(" 返会的内容，通过 "),_("code",[v._v("If-None-Match")]),v._v(" 的请求头传递给服务器。")]),v._v(" "),_("li",[v._v("服务器收到之后会用这个和服务器上存的文件最后一次变动生成的 "),_("code",[v._v("ETag")]),v._v(" 的值做对比，如果两个相同则返回 "),_("code",[v._v("304")]),v._v("，告知浏览器使用本地缓存，否则返回 "),_("code",[v._v("200")]),v._v("，并且需要更新 "),_("code",[v._v("ETag")]),v._v(" 的值，并且一同返回资源。")])])])])])]),v._v(" "),_("p",[v._v("所以汇总一下浏览器读取缓存整体的一个流程，在接入了 "),_("code",[v._v("CDN")]),v._v(" 之后和不接入 "),_("code",[v._v("CDN")]),v._v(" 的情况我们可以描述一下：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("接入 "),_("code",[v._v("CDN")]),v._v(" 之后，当用户在浏览器地址栏输入一个 "),_("code",[v._v("URL")]),v._v(" 之后，浏览器会先去根据请求头来确定当前的强缓存的时效性，如果未失效，则会去读取本地缓存，至于读取 "),_("code",[v._v("disk")]),v._v(" 还是 "),_("code",[v._v("momery")]),v._v("，需要看用户的行为。如果强缓存未命中，也就是说 "),_("code",[v._v("max-age")]),v._v(" 的时间过期了，或者 "),_("code",[v._v("Cache-Control")]),v._v(" 设置为 "),_("code",[v._v("no-cache")]),v._v("，则会进行协商缓存，协商缓存如果返回结果告诉浏览器，资源未更改，可以使用缓存，则浏览器依旧读取本地缓存。如果当协商缓存也失效之后，此时因为接入了 "),_("code",[v._v("CDN")]),v._v("，所以浏览器会向 "),_("code",[v._v("CDN")]),v._v(" 的边缘节点发起请求，而不是进行一系列的域名解析去源服务器找缓存或者资源，但是这会面临 "),_("code",[v._v("CDN")]),v._v(" 的缓存时效性，所以后面会执行上边的"),_("code",[v._v("【接入 CDN 的逻辑】")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("不接入 "),_("code",[v._v("CND")]),v._v(" 之后，强缓存和协商缓存的命中逻辑都和接入 "),_("code",[v._v("CDN")]),v._v(" 的一致，但是因为没有接入 "),_("code",[v._v("CDN")]),v._v("，所以需要进行域名解析等一系列步骤，执行的是上边"),_("code",[v._v("【不接入 CDN 】的逻辑")]),v._v("。")])])]),v._v(" "),_("h2",{attrs:{id:"对缓存造成的影响"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对缓存造成的影响"}},[v._v("#")]),v._v(" 对缓存造成的影响")]),v._v(" "),_("h3",{attrs:{id:"用户行为"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用户行为"}},[v._v("#")]),v._v(" 用户行为")]),v._v(" "),_("ul",[_("li",[v._v("第一次打开网页，获取内容存入 "),_("code",[v._v("disk")]),v._v("，再次打开如果 "),_("code",[v._v("disk")]),v._v(" 有，则读取。没有则查看协商缓存")]),v._v(" "),_("li",[v._v("普通刷新，若第一次命中了 "),_("code",[v._v("disk")]),v._v(" 的缓存，刷新的时候会直接读取 "),_("code",[v._v("memory")]),v._v(" 并且优先级高于 "),_("code",[v._v("disk")])]),v._v(" "),_("li",[v._v("强制清缓存刷新，不使用本地缓存")])]),v._v(" "),_("h3",{attrs:{id:"webpack-打包后的文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包后的文件"}},[v._v("#")]),v._v(" "),_("code",[v._v("webpack")]),v._v(" 打包后的文件")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果设置了强缓存，在 "),_("code",[v._v("webpack")]),v._v(" 打包之后，因为文件内容改变最终打包的名称 "),_("code",[v._v("chunkhash")]),v._v(" 会改变，所以浏览器的缓存失效，就会请求新的资源，并不会导致出现请求旧的资源的问题。")]),v._v(" "),_("p",[v._v("所以第一次请求新资源，以后可能会读取缓存。")])])])])}),[],!1,null,null,null);_.default=d.exports}}]);